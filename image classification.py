{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "gpuType": "T4",
      "authorship_tag": "ABX9TyMMn4zcKmr+DnB0Z2XG5UOO",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Go-Maeda-git/pytorch_instraction/blob/main/image%20classification.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import torch\n",
        "import torch.nn as nn\n",
        "import torch.optim as optim\n",
        "import torchvision\n",
        "import torchvision.transforms as transforms\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "# データの前処理と拡張\n",
        "# 学習用データにはランダムな反転やクロップを適用\n",
        "transform_train = transforms.Compose([\n",
        "    transforms.RandomCrop(32, padding=4), # 32x32にランダムクロップ (パディング後)\n",
        "    transforms.RandomHorizontalFlip(),    # 水平方向にランダム反転\n",
        "    transforms.ToTensor(),\n",
        "    transforms.Normalize((0.4914, 0.4822, 0.4465), (0.2023, 0.1994, 0.2010)), # CIFAR-10の平均と標準偏差\n",
        "])\n",
        "\n",
        "# テスト/検証用データは正規化のみ\n",
        "transform_test = transforms.Compose([\n",
        "    transforms.ToTensor(),\n",
        "    transforms.Normalize((0.4914, 0.4822, 0.4465), (0.2023, 0.1994, 0.2010)),\n",
        "])\n",
        "\n",
        "# CIFAR-10データセットのダウンロードと準備\n",
        "trainset = torchvision.datasets.CIFAR10(root='./data', train=True,\n",
        "                                        download=True, transform=transform_train)\n",
        "trainloader = torch.utils.data.DataLoader(trainset, batch_size=128, # バッチサイズを大きくできる\n",
        "                                          shuffle=True, num_workers=2) # num_workersでデータ読み込みを高速化\n",
        "\n",
        "testset = torchvision.datasets.CIFAR10(root='./data', train=False,\n",
        "                                       download=True, transform=transform_test)\n",
        "testloader = torch.utils.data.DataLoader(testset, batch_size=100,\n",
        "                                         shuffle=False, num_workers=2)\n",
        "\n",
        "classes = ('plane', 'car', 'bird', 'cat', 'deer',\n",
        "           'dog', 'frog', 'horse', 'ship', 'truck')\n",
        "\n",
        "# 画像表示用の関数 (オプション)\n",
        "def imshow(img):\n",
        "    img = img / 2 + 0.5     # 正規化を元に戻す (おおよそ)\n",
        "    npimg = img.numpy()\n",
        "    plt.imshow(np.transpose(npimg, (1, 2, 0))) # (C, H, W) -> (H, W, C)\n",
        "    plt.show()\n",
        "\n",
        "# 学習データから一部を表示してみる (オプション)\n",
        "# dataiter = iter(trainloader)\n",
        "# images, labels = next(dataiter)\n",
        "# imshow(torchvision.utils.make_grid(images[:4])) # 最初の4枚を表示\n",
        "# print(' '.join(f'{classes[labels[j]]:5s}' for j in range(4)))\n",
        "class SimpleCNN(nn.Module):\n",
        "    def __init__(self, num_classes=10):\n",
        "        super(SimpleCNN, self).__init__()\n",
        "        self.conv_layers = nn.Sequential(\n",
        "            nn.Conv2d(in_channels=3, out_channels=32, kernel_size=3, padding=1), # 32x32x3 -> 32x32x32\n",
        "            nn.ReLU(),\n",
        "            nn.BatchNorm2d(32), # バッチ正規化\n",
        "            nn.MaxPool2d(kernel_size=2, stride=2), # 32x32x32 -> 16x16x32\n",
        "\n",
        "            nn.Conv2d(in_channels=32, out_channels=64, kernel_size=3, padding=1), # 16x16x32 -> 16x16x64\n",
        "            nn.ReLU(),\n",
        "            nn.BatchNorm2d(64),\n",
        "            nn.MaxPool2d(kernel_size=2, stride=2), # 16x16x64 -> 8x8x64\n",
        "\n",
        "            nn.Conv2d(in_channels=64, out_channels=128, kernel_size=3, padding=1), # 8x8x64 -> 8x8x128\n",
        "            nn.ReLU(),\n",
        "            nn.BatchNorm2d(128),\n",
        "            nn.MaxPool2d(kernel_size=2, stride=2)  # 8x8x128 -> 4x4x128\n",
        "        )\n",
        "        self.fc_layers = nn.Sequential(\n",
        "            nn.Flatten(), # 4x4x128の出力をフラット化 -> 2048\n",
        "            nn.Dropout(0.5), # ドロップアウトで過学習抑制\n",
        "            nn.Linear(128 * 4 * 4, 512),\n",
        "            nn.ReLU(),\n",
        "            nn.Dropout(0.5),\n",
        "            nn.Linear(512, num_classes) # 最終出力はクラス数\n",
        "        )\n",
        "\n",
        "    def forward(self, x):\n",
        "        x = self.conv_layers(x)\n",
        "        x = self.fc_layers(x)\n",
        "        return x\n",
        "\n",
        "device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n",
        "model = SimpleCNN(num_classes=len(classes)).to(device)\n",
        "criterion = nn.CrossEntropyLoss()\n",
        "optimizer = optim.Adam(model.parameters(), lr=0.001)\n",
        "# 学習率スケジューラ (オプション、学習が進むにつれて学習率を減衰させる)\n",
        "# scheduler = optim.lr_scheduler.StepLR(optimizer, step_size=10, gamma=0.1)\n",
        "num_epochs = 25 # 学習エポック数\n",
        "\n",
        "for epoch in range(num_epochs):\n",
        "    model.train() # 学習モード\n",
        "    running_loss = 0.0\n",
        "    correct_train = 0\n",
        "    total_train = 0\n",
        "\n",
        "    for i, data in enumerate(trainloader, 0):\n",
        "        inputs, labels = data\n",
        "        inputs, labels = inputs.to(device), labels.to(device)\n",
        "\n",
        "        optimizer.zero_grad()\n",
        "\n",
        "        outputs = model(inputs)\n",
        "        loss = criterion(outputs, labels)\n",
        "        loss.backward()\n",
        "        optimizer.step()\n",
        "\n",
        "        running_loss += loss.item()\n",
        "        _, predicted = torch.max(outputs.data, 1)\n",
        "        total_train += labels.size(0)\n",
        "        correct_train += (predicted == labels).sum().item()\n",
        "\n",
        "    train_loss = running_loss / len(trainloader)\n",
        "    train_acc = 100 * correct_train / total_train\n",
        "\n",
        "    # --- 検証フェーズ ---\n",
        "    model.eval() # 評価モード\n",
        "    correct_val = 0\n",
        "    total_val = 0\n",
        "    val_loss = 0.0\n",
        "    with torch.no_grad(): # 勾配計算をオフに\n",
        "        for data in testloader: # ここではtestloaderを検証用として使う\n",
        "            images, labels_val = data\n",
        "            images, labels_val = images.to(device), labels_val.to(device)\n",
        "            outputs_val = model(images)\n",
        "            loss_val_batch = criterion(outputs_val, labels_val)\n",
        "            val_loss += loss_val_batch.item()\n",
        "            _, predicted_val = torch.max(outputs_val.data, 1)\n",
        "            total_val += labels_val.size(0)\n",
        "            correct_val += (predicted_val == labels_val).sum().item()\n",
        "\n",
        "    val_loss_epoch = val_loss / len(testloader)\n",
        "    val_acc = 100 * correct_val / total_val\n",
        "\n",
        "    print(f'Epoch [{epoch+1}/{num_epochs}], '\n",
        "          f'Train Loss: {train_loss:.4f}, Train Acc: {train_acc:.2f}%, '\n",
        "          f'Val Loss: {val_loss_epoch:.4f}, Val Acc: {val_acc:.2f}%')\n",
        "\n",
        "    # if scheduler: # 学習率スケジューラを使う場合\n",
        "    #     scheduler.step()\n",
        "\n",
        "print('Finished Training')\n",
        "\n",
        "# モデルの保存 (オプション)\n",
        "# PATH = './cifar_net.pth'\n",
        "# torch.save(model.state_dict(), PATH)\n",
        "# モデルをロードする場合 (オプション)\n",
        "# model = SimpleCNN(num_classes=len(classes)).to(device)\n",
        "# model.load_state_dict(torch.load(PATH))\n",
        "\n",
        "# テストデータから一部を取り出して予測してみる\n",
        "dataiter = iter(testloader)\n",
        "images_test, labels_test = next(dataiter)\n",
        "images_test_show = images_test[:4].cpu() # 表示用にCPUへ\n",
        "labels_test_show = labels_test[:4]\n",
        "\n",
        "# 画像表示\n",
        "# imshow(torchvision.utils.make_grid(images_test_show))\n",
        "# print('GroundTruth: ', ' '.join(f'{classes[labels_test_show[j]]:5s}' for j in range(4)))\n",
        "\n",
        "# 予測\n",
        "model.eval()\n",
        "with torch.no_grad():\n",
        "    outputs_pred = model(images_test[:4].to(device)) # 最初の4枚を予測\n",
        "\n",
        "_, predicted_indices = torch.max(outputs_pred, 1)\n",
        "\n",
        "print('Predicted:   ', ' '.join(f'{classes[predicted_indices[j]]:5s}'\n",
        "                              for j in range(4)))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "L2WyKn5uAxKo",
        "outputId": "adc4ea3b-08e4-4f7d-fdb4-b172b1b26628"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 170M/170M [00:03<00:00, 44.2MB/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch [1/25], Train Loss: 1.5267, Train Acc: 44.29%, Val Loss: 1.1061, Val Acc: 59.96%\n",
            "Epoch [2/25], Train Loss: 1.2038, Train Acc: 56.79%, Val Loss: 0.9608, Val Acc: 65.69%\n",
            "Epoch [3/25], Train Loss: 1.0939, Train Acc: 61.38%, Val Loss: 0.8582, Val Acc: 69.35%\n",
            "Epoch [4/25], Train Loss: 1.0187, Train Acc: 64.18%, Val Loss: 0.8306, Val Acc: 71.34%\n",
            "Epoch [5/25], Train Loss: 0.9735, Train Acc: 65.87%, Val Loss: 0.7788, Val Acc: 73.17%\n",
            "Epoch [6/25], Train Loss: 0.9322, Train Acc: 67.31%, Val Loss: 0.7601, Val Acc: 74.19%\n",
            "Epoch [7/25], Train Loss: 0.8998, Train Acc: 68.64%, Val Loss: 0.7442, Val Acc: 74.21%\n",
            "Epoch [8/25], Train Loss: 0.8689, Train Acc: 69.65%, Val Loss: 0.6759, Val Acc: 76.64%\n",
            "Epoch [9/25], Train Loss: 0.8496, Train Acc: 70.62%, Val Loss: 0.6645, Val Acc: 76.92%\n",
            "Epoch [10/25], Train Loss: 0.8308, Train Acc: 70.97%, Val Loss: 0.6634, Val Acc: 77.14%\n",
            "Epoch [11/25], Train Loss: 0.8144, Train Acc: 71.85%, Val Loss: 0.6519, Val Acc: 77.45%\n",
            "Epoch [12/25], Train Loss: 0.7968, Train Acc: 72.34%, Val Loss: 0.6346, Val Acc: 78.15%\n",
            "Epoch [13/25], Train Loss: 0.7773, Train Acc: 73.14%, Val Loss: 0.6353, Val Acc: 77.81%\n",
            "Epoch [14/25], Train Loss: 0.7622, Train Acc: 73.77%, Val Loss: 0.5946, Val Acc: 79.31%\n",
            "Epoch [15/25], Train Loss: 0.7548, Train Acc: 73.92%, Val Loss: 0.6016, Val Acc: 79.81%\n",
            "Epoch [16/25], Train Loss: 0.7386, Train Acc: 74.40%, Val Loss: 0.6014, Val Acc: 79.46%\n",
            "Epoch [17/25], Train Loss: 0.7266, Train Acc: 74.93%, Val Loss: 0.5719, Val Acc: 80.87%\n",
            "Epoch [18/25], Train Loss: 0.7165, Train Acc: 75.29%, Val Loss: 0.5631, Val Acc: 80.78%\n",
            "Epoch [19/25], Train Loss: 0.7075, Train Acc: 75.69%, Val Loss: 0.5809, Val Acc: 80.33%\n",
            "Epoch [20/25], Train Loss: 0.6952, Train Acc: 76.05%, Val Loss: 0.5385, Val Acc: 81.88%\n",
            "Epoch [21/25], Train Loss: 0.6888, Train Acc: 76.32%, Val Loss: 0.5498, Val Acc: 81.10%\n",
            "Epoch [22/25], Train Loss: 0.6789, Train Acc: 76.52%, Val Loss: 0.5453, Val Acc: 81.03%\n",
            "Epoch [23/25], Train Loss: 0.6667, Train Acc: 76.86%, Val Loss: 0.5340, Val Acc: 81.33%\n",
            "Epoch [24/25], Train Loss: 0.6614, Train Acc: 77.14%, Val Loss: 0.5314, Val Acc: 82.11%\n",
            "Epoch [25/25], Train Loss: 0.6516, Train Acc: 77.60%, Val Loss: 0.5304, Val Acc: 82.24%\n",
            "Finished Training\n",
            "Predicted:    cat   ship  ship  plane\n"
          ]
        }
      ]
    }
  ]
}